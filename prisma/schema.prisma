// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NOTE: 스토어를 생성할 수 있는 관리자 테이블
// id ------< Store.admin
model Admin {
  id        String    @id
  name      String
  email     String
  password  String
  createdAt DateTime  @db.Date()
  deletedAt DateTime? @db.Date()

  Stores Store[]
}

// NOTE: Customer가 가입할 수 있는 상점 테이블
// id ------< Category.store
// id ------< Customer.store
// id ------< Order.store
// id ------< CustomField.store
// id ------< Product.store
// admin >------ Admin.id
model Store {
  id        String    @id
  admin     String
  name      String
  createdAt DateTime  @db.Date()
  deletedAt DateTime? @db.Date()

  Admin        Admin         @relation(fields: [admin], references: [id])
  Categories   Category[]
  Customers    Customer[]
  Orders       Order[]
  CustomFields CustomField[]
  Products     Product[]
}

// NOTE: 상점에서 생성하는 제품 카테고리 테이블
// store >------ Store.id
// id >------ CategoriesOnProducts ------< Product.id
model Category {
  id    String @id
  name  String
  store String

  Products CategoriesOnProducts[]
  Store    Store                  @relation(fields: [store], references: [id])
}

// NOTE: 상점 고객 테이블
// id ------< Order.customer
// id ------< CustomerCustomField.customer
// store >------ Store.id
model Customer {
  id       String @id
  store    String
  name     String
  email    String
  password String

  Store                Store                 @relation(fields: [store], references: [id])
  Orders               Order[]
  CustomerCustomFields CustomerCustomField[]
}

// NOTE: 상점에서 등록한 제품 테이블
// id >------ CategoriesOnProducts ------< Category.id
// id ------< ProductCustomField.product
// store >------ Store.id
model Product {
  id    String @id
  store String
  name  String
  price String

  Categories          CategoriesOnProducts[]
  Products            OrdersOnProducts[]
  ProductCustomFields ProductCustomField[]
  Store               Store                  @relation(fields: [store], references: [id])
}

// NOTE: 제품, 카테고리 다대다 관계 테이블
// Product.id >------ CategoriesOnProducts ------< Category.id
model CategoriesOnProducts {
  Category Category @relation(fields: [category], references: [id])
  category String
  Product  Product  @relation(fields: [product], references: [id])
  product  String

  @@id([category, product])
}

// NOTE: 주문 테이블
// id >------ OrderCustomField.order
// customer >------ Customer.id
// store >------ Store.id
// id >------ OrdersOnProducts ------< Product.id
model Order {
  id       String @id
  store    String
  customer String
  status   String
  price    String

  Products          OrdersOnProducts[]
  OrderCustomFields OrderCustomField[]
  Customer          Customer           @relation(fields: [customer], references: [id])
  Store             Store              @relation(fields: [store], references: [id])
}

// NOTE: 제품, 주문 다대다 관계 테이블
model OrdersOnProducts {

  Product Product @relation(fields: [product], references: [id])
  product String
  Order   Order   @relation(fields: [order], references: [id])
  order   String

  @@id([product, order])
}

// NOTE: 커스텀필드 구성 테이블
// id ------ CustomFieldDefaultData.customField
// id ------ CustomFieldEnumData.customField
// id ------< CustomerCustomField.customField
// id ------< ProductCustomField.customField
// id ------< OrderCustomField.customField
// store >------ Store.id
model CustomField {
  id        String                  @id
  store     String
  origin    Origin
  require   Boolean
  fieldType FieldType
  isArray   Boolean
  isDefault CustomFieldDefaultData?
  isEnum    CustomFieldEnumData?
  createdAt DateTime                @db.Date()
  deletedAt DateTime?               @db.Date()

  CustomerCustomFields CustomerCustomField[]
  ProductCustomFields  ProductCustomField[]
  OrderCustomFields    OrderCustomField[]
  Store                Store                 @relation(fields: [store], references: [id])
}

// NOTE: 커스텀필드 적용 범위 구분
enum Origin {
  Customer
  Product
  Order
}

// NOTE: 커스텀필드 데이터 타입 구분
enum FieldType {
  String
  Number
  Boolean
}

//NOTE: 커스텀필드 기본데이터 저장 테이블
// customField ------ CustomField.id
model CustomFieldDefaultData {
  id          String    @id
  customField String    @unique
  content     Json
  createdAt   DateTime  @db.Date()
  deletedAt   DateTime? @db.Date()

  CustomField CustomField @relation(fields: [customField], references: [id])
}

// NOTE: 커스텀필드 열거형 데이터 저장 테이블
// customField ------ CustomField.id
model CustomFieldEnumData {
  id          String    @id
  customField String    @unique
  content     Json
  createdAt   DateTime  @db.Date()
  deletedAt   DateTime? @db.Date()

  CustomField CustomField @relation(fields: [customField], references: [id])
}

// NOTE: Customer 커스텀필드 저장 테이블
// customer >------ Customer.id
// customField >------ CustomField.id
model CustomerCustomField {
  id          String    @id
  customer    String
  customField String
  content     Json
  createdAt   DateTime  @db.Date()
  deletedAt   DateTime? @db.Date()

  Customer    Customer    @relation(fields: [customer], references: [id])
  CustomField CustomField @relation(fields: [customField], references: [id])
}

// NOTE: Product 커스텀필드 저장 테이블
// product >------ Product.id
// customField >------ CustomField.id
model ProductCustomField {
  id          String    @id
  product     String
  customField String
  content     Json
  createdAt   DateTime  @db.Date()
  deletedAt   DateTime? @db.Date()

  Product     Product     @relation(fields: [product], references: [id])
  CustomField CustomField @relation(fields: [customField], references: [id])
}

// NOTE: Order 커스텀필드 저장 테이블
// order >------ Order.id
// customField >------ CustomField.id
model OrderCustomField {
  id          String    @id
  order       String
  customField String
  content     Json
  createdAt   DateTime  @db.Date()
  deletedAt   DateTime? @db.Date()

  Order       Order        @relation(fields: [order], references: [id])
  CustomField CustomField? @relation(fields: [customField], references: [id])
}
